#ifndef __fsm_cli_acs_h__
#define __fsm_cli_acs_h__


//  code generated by fsm_gen
// generated automatically
// coded last modification:        Tue Mar 29 14:34:49 2011
// pythonscript last modification: Tue Mar 29 12:57:20 2011


#include "support/alarm.h"
#include "support/signalslot.hpp"

#include "components/acs/msg_acs.h"
#include "support/crc32.h"

namespace fsmgen_fsm_cli_acs {
    class abstract_status;
};





namespace mtk{namespace acs_cli{


class fsm_cli_acs   : public mtk::SignalReceptor
{
    mtk::non_copyable nc;
    typedef  fsm_cli_acs  CLASS_NAME;


public:
    fsm_cli_acs ();
    virtual ~fsm_cli_acs ();

    //  INPUT
    void user_rq_login  ( const std::string&   user_name  , const std::string&   _password    );
    void user_rq_logout ( );


    //  OUTPUT
    mtk::Signal< const mtk::acs::msg::res_login::IC_login_response_info&   /*login_conf*/   > sig_confirm_login_ok;
    mtk::Signal< const std::string&   /*description*/   > sig_reject_login;
    mtk::Signal< const std::string&   /*description*/   > sig_logout_login;


    //  ACCESS
    const mtk::CountPtr< mtk::qpid_session >    &  qpid_session () const;



private:
    //  current_status
    mtk::CountPtr<fsmgen_fsm_cli_acs::abstract_status>      current_status;
    void on_new_status (mtk::CountPtr<fsmgen_fsm_cli_acs::abstract_status>  new_status);

    //  keep temp status
    mtk::list<mtk::CountPtr<fsmgen_fsm_cli_acs::abstract_status> >     queue_temp_status;
    void on_keep_temp_status (void);
    void on_remove_temp_status (void);
};





};   //  namespace mtk
};   //  namespace acs_cli


#endif // __fsm_cli_acs_h__


