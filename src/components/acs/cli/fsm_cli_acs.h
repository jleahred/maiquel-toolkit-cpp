#ifndef __fsm_cli_acs_h__
#define __fsm_cli_acs_h__


//  code generated by fsm_gen
// generated automatically
// coded last modification:        $CODED_LAST_MODIF  desactivated, lots of false notifications
// pythonscript last modification: $SCRIPT_LAST_MODIF

#include "support/mtk_string.h"



#include "support/alarm.h"
#include "support/signalslot.hpp"
#include "support/list.hpp"

#include "components/acs/msg_acs.h"
#include "support/crc32.h"

namespace fsmgen_fsm_cli_acs {
    class abstract_status;
};





namespace mtk{namespace acs_cli{

class fsm_cli_acs_dangerous_signals_not_warped;




class fsm_cli_acs   : public mtk::SignalReceptor
{
    mtk::non_copyable nc;

public:
    explicit fsm_cli_acs ();
    explicit fsm_cli_acs (const mtk::CountPtr<fsm_cli_acs_dangerous_signals_not_warped>&  _ptr);
    virtual ~fsm_cli_acs (){};



    //  INPUT
    void user_rq_login  ( const std::string&   _user_name , const std::string&   _password    );
    void user_rq_logout ( );
    void user_rq_changepass ( const std::string&   _old_password, const std::string&   _new_password  );


    //  OUTPUT
    mtk::Signal< const mtk::acs::msg::res_login::IC_session_info&   /*login_conf*/   > sig_confirm_login_ok;
    mtk::Signal< const std::string&   /*description*/   > sig_reject_login;
    mtk::Signal< const std::string&   /*description*/   > sig_logout_login;
    mtk::Signal<  > sig_password_changed;
    mtk::Signal<  > sig_password_change_rj;


    //  ACCESS
    const std::string                         &  user_name () const;




    //  STATS AND COVERAGE
    std::string  get_coverage_string(void);
    
    

    void  set   (const mtk::CountPtr<fsm_cli_acs_dangerous_signals_not_warped>&  _ptr);


private:
    mtk::CountPtr<fsm_cli_acs_dangerous_signals_not_warped>       ptr;

};




//  this class has to be used carefully
//  It has to be used as internal storage in respositories

class fsm_cli_acs_dangerous_signals_not_warped   : public mtk::SignalReceptor
{
    mtk::non_copyable nc;


public:
    fsm_cli_acs_dangerous_signals_not_warped ();
    virtual ~fsm_cli_acs_dangerous_signals_not_warped ();

    //  INPUT
    void user_rq_login  ( const std::string&   _user_name , const std::string&   _password    );
    void user_rq_logout ( );
    void user_rq_changepass ( const std::string&   _old_password, const std::string&   _new_password  );


    //  OUTPUT
    mtk::Signal< const mtk::acs::msg::res_login::IC_session_info&   /*login_conf*/   > sig_confirm_login_ok;
    mtk::Signal< const std::string&   /*description*/   > sig_reject_login;
    mtk::Signal< const std::string&   /*description*/   > sig_logout_login;
    mtk::Signal<  > sig_password_changed;
    mtk::Signal<  > sig_password_change_rj;


    //  ACCESS
    const std::string                         &  user_name () const;



    //  STATS AND COVERAGE
    std::string  get_coverage_string(void);


private:
    //  current_status
    mtk::CountPtr<fsmgen_fsm_cli_acs::abstract_status>      current_status;
    void on_new_status (mtk::CountPtr<fsmgen_fsm_cli_acs::abstract_status>  new_status);

    //  keep temp status
    mtk::list<mtk::CountPtr<fsmgen_fsm_cli_acs::abstract_status> >     queue_temp_status;
    void on_keep_temp_status (void);
    void on_remove_temp_status (void);
};






};   //  namespace mtk
};   //  namespace acs_cli


#endif // __fsm_cli_acs_h__


